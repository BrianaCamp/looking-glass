//
//   @grids
// ---------------------------------------------------------
//
//  A modified form of csswizardry-grids to use css grids with
//  a flexbox fallback.
//
//  It is recommended to set autoprefixer to `grid: false`.
//
// ---------------------------------------------------------

// ------------------------------------
//
//  Contents
//
// ------------------------------------

//  * INTRODUCTION.........How the grid system works.
//  * MIXINS...............Library mixins.
//  * GRID SETUP...........Build the grid structure.
//
//  Indebted to the following:
//  --------------------------
//  https://gridbyexample.com/
//  http://learncssgrid.com/
//  https://www.chenhuijing.com/blog/basic-grid-with-fallbacks/
//  https://css-tricks.com/snippets/css/complete-guide-grid/
//  https://github.com/philipwalton/solved-by-flexbox
//  https://github.com/inuitcss/inuitcss

// ------------------------------------
//
//  Introduction
//
// ------------------------------------

// sasspool grids provides you with widths to suit a number of breakpoints
// designed around devices of a size you specify. Out of the box, sasspool
// grids caters to the following types of device:
//
// palm     --  palm-based devices, like phones and small tablets
// lap      --  lap-based devices, like iPads or laptops
// portable --  all of the above
// desk     --  stationary devices, like desktop computers
// regular  --  any/all types of device
//
// These namespaces are then used in the library to give you the ability to
// manipulate your layouts based around them, for example:
//
//    <div class="grid__item  c-1of1  lap--c-1of2  desk--c-1of3">
//
// This would give you a grid item which is 100% width unless it is on a lap
// device, at which point it become 50% wide, or it is on a desktop device, at
// which point it becomes 33.333% width.
//
// All classes in sasspool grids follow this patten, so you should fairly
// quickly be able to piece together any combinations you can imagine, for
// example:
//
//    `class="grid__item  c-1of1  lap--c-1of2  desk--c-1of3"`
//
//    `class="grid__item  c-1of4  palm--c-1of2"`
//
//    `class="grid__item  palm--c-1of3  desk--c-5of12"`

// ------------------------------------
//
//  Mixins
//
// ------------------------------------

//  These mixins are for the library to use only, you should not need to modify
//  them at all.

// Create our width classes, prefixed by the specified namespace.
@mixin grid-widths($namespace: '', $columns: $cols, $availableColumns: $cols) {
    @for $i from 1 through $availableColumns {
        // go through each number up to the total number of columns
        @if $availableColumns % $i == 0 {
            // if the number of columns is divisible by this number, we'll create column classes for it
            @for $j from 1 through $i {
                // go through each number grouping of columns to set specific size classes
                $gcd: gcd($j, $i); // grab the greatest common divisor for these columns to see if it is the same as a previous class

                @if $gcd == 1 or ($namespace == '' and $columns != $cols) {
                    // if the gcd is 1, let's write new styles as this width hasn't already been set
                    // if we're writing additional styles for further breakpoints, let's also write the styles as we can't extend in the media query
                    $width: percentage($j / $i); // let's get the percentage width

                    @if $columns == $availableColumns {
                        // let's not write flexbox width styles again for larger breakpoint
                        .#{$namespace}c-#{$j}of#{$i} {
                            flex-basis: $width;
                            max-width: $width;
                        }
                    }

                    @if $j != $i or $columns == $availableColumns {
                        // let's not write full width styles again for larger breakpoint
                        @supports (display: grid) {
                            .#{$namespace}c-#{$j}of#{$i} {
                                @if $j == $i {
                                    grid-column: 1 / -1; // just to make full width columns a little more resilient
                                } @else {
                                    grid-column: auto / span #{$columns * ($j / $i)};
                                }
                                max-width: none;
                            }
                        }
                    }
                } @else {
                    // find the reduced fraction class this column is equal to
                    $ii: $i / $gcd;
                    $jj: $j / $gcd;

                    .#{$namespace}c-#{$j}of#{$i} {
                        @extend .#{$namespace}c-#{$jj}of#{$ii};
                    }
                }
            }
        }
    }
}

// Create our grid variants
@mixin grid-gutter-variants($namespace: '', $variant: '', $newGutter: $gutter) {
    .#{$namespace}grid--#{$variant} {
        margin: #{-1 * $newGutter} 0 0 #{-1 * $newGutter};
    }

    .#{$namespace}grid--#{$variant} > .grid__item {
        padding: $newGutter 0 0 $newGutter;
    }

    @supports (display: grid) {
        .#{$namespace}grid--#{$variant} {
            grid-gap: $newGutter;
            margin: 0;
        }

        .#{$namespace}grid--#{$variant} > .grid__item {
            padding: 0;
        }
    }
}

// ------------------------------------
//
//  CSS grids setup
//
// ------------------------------------

@if $grid-type == 'modern' {
    // 1. Allow the grid system to be used on lists.
    // 2. Remove any margins and paddings that might affect the grid system.
    // 3. Apply a negative `margin-left` and `margin-top` to negate the columnsâ€™ gutters.
    .grid {
        display: flex;
        flex-wrap: wrap;
        list-style: none; // [1] */
        margin: #{-1 * $gutter} 0 0 #{-1 * $gutter}; // [2, 3] */
        padding: 0; // [2] */
    }

    @supports (display: grid) {
        .grid {
            display: grid;
            grid-gap: $gutter;
            grid-template-columns: repeat($cols, 1fr);
            margin: 0;
        }

        // Our responsive column classes
        $currentCols: $cols;
        @each $name, $val in $grid-breakpoints {
            @if type-of($val) == 'map' {
                // columns are set per breakpoint, so we'll do further checks
                $breakCols: map-get($val, 'cols');

                @if $currentCols != $breakCols {
                    // if the columns at this breakpoint are different from the last
                    @media #{query(map-get($val, 'query'))} {
                        .grid {
                            grid-template-columns: repeat(#{$breakCols}, 1fr);
                        }
                    }

                    $currentCols: $breakCols;
                }
            }
        }
    }

    // 1. Space columns apart.
    // 2. Full-width unless told to behave otherwise.
    // 3. Required to combine fluid widths and fixed gutters.
    .grid__item {
        box-sizing: border-box; // [3] */
        flex: 0 0 100%; // [2] */
        padding: $gutter 0 0 $gutter; // [1] */
    }

    @supports (display: grid) {
        .grid__item {
            grid-column: 1 / -1;
            max-width: none;
            min-width: 0; // firefox overflow y fix
            padding: 0;
        }
    }

    // Align grid cells vertically (`.grid--middle` or `.grid--bottom`). Extends `.grid`.
    .grid--middle {
        align-items: center;
    }

    .grid--bottom {
        align-items: flex-end;
    }

    @supports (display: grid) {
        .grid--bottom {
            align-items: end;
        }
    }

    // Gutterless grids have all the properties of regular grids, minus any spacing.
    // Extends `.grid`.
    @include grid-gutter-variants($variant: 'full', $newGutter: 0);
    @each $name, $val in $grid-breakpoints {
        @if type-of($val) == 'map' {
            @media #{query(map-get($val, 'query'), 'max')} {
                @include grid-gutter-variants($namespace: 'lt-#{$name}--', $variant: 'full', $newGutter: 0);
            }
        } @else {
            @media #{query($val, 'max')} {
                @include grid-gutter-variants($namespace: 'lt-#{$name}--', $variant: 'full', $newGutter: 0);
            }
        }
    }

    // Create grids with narrower gutters. Extends `.grid`.
    @include grid-gutter-variants(
        $variant: 'narrow',
        $newGutter: (
            $gutter / 2
        )
    );
    @each $name, $val in $grid-breakpoints {
        @if type-of($val) == 'map' {
            @media #{query(map-get($val, 'query'), 'max')} {
                @include grid-gutter-variants(
                    $namespace: 'lt-#{$name}--',
                    $variant: 'narrow',
                    $newGutter: (
                        $gutter / 2
                    )
                );
            }
        } @else {
            @media #{query($val, 'max')} {
                @include grid-gutter-variants(
                    $namespace: 'lt-#{$name}--',
                    $variant: 'narrow',
                    $newGutter: (
                        $gutter / 2
                    )
                );
            }
        }
    }

    // Create grids with wider gutters. Extends `.grid`.
    @include grid-gutter-variants(
        $variant: 'wide',
        $newGutter: (
            $gutter * 2
        )
    );
    @each $name, $val in $grid-breakpoints {
        @if type-of($val) == 'map' {
            @media #{query(map-get($val, 'query'))} {
                @include grid-gutter-variants(
                    $namespace: '#{$name}--',
                    $variant: 'wide',
                    $newGutter: (
                        $gutter * 2
                    )
                );
            }
        } @else {
            @media #{query($val)} {
                @include grid-gutter-variants(
                    $namespace: '#{$name}--',
                    $variant: 'wide',
                    $newGutter: (
                        $gutter * 2
                    )
                );
            }
        }
    }

    // Our regular, non-responsive width classes.
    @if $cols > 1 {
        // we only write out the column classes if we have more than one column - otherwise the base element styles are the same
        @include grid-widths;

        // setting non-responsive widths to work a larger breakpoints
        $currentCols: $cols;
        @each $name, $val in $grid-breakpoints {
            @if type-of($val) == 'map' {
                // columns are set per breakpoint, so we'll do further checks
                $breakCols: map-get($val, 'cols');

                // if this breakpoint has different columns that the base,
                // we need to set our base styles to work at this media query
                @if $currentCols != $breakCols {
                    // if the columns at this breakpoint are different from the last
                    @media #{query(map-get($val, 'query'))} {
                        @include grid-widths($columns: $breakCols);
                    }

                    $currentCols: $breakCols;
                }
            }
        }
    }

    // Our responsive classes
    $i: 1;
    @each $name, $val in $grid-breakpoints {
        @if type-of($val) == 'map' {
            // columns are set per breakpoint, so we'll do more complex work
            $currentCols: map-get($val, 'cols');

            @if $currentCols > 1 {
                // we only write out the responsive classes if we have more than one column at this breakpoint
                $lastUsedCols: $currentCols;

                @for $j from $i through length($grid-breakpoints) {
                    $breakVal: nth(nth($grid-breakpoints, $j), 2);
                    $breakCols: map-get($breakVal, 'cols');

                    @if $j == $i or $lastUsedCols != $breakCols {
                        @media #{query(map-get($breakVal, 'query'))} {
                            @include grid-widths($namespace: '#{$name}--', $columns: $breakCols, $availableColumns: $currentCols);
                        }

                        $lastUsedCols: $breakCols;
                    }
                }
            }
        } @else {
            @if $cols > 1 {
                // we only write out the responsive classes if we have more than one column
                @media #{query($val)} {
                    @include grid-widths($namespace: '#{$name}--');
                }
            }
        }

        $i: $i + 1;
    }
}
