// Sass Variables
//
// Variables are available for many uses - from assets, to media queries, to z-index and beyond.
//
// Many other variables are available and available from their respective sections — such as colors and fonts.
//
// Weight: 20
//
// Style guide: sass

// URLs
//
// Variables are used to set the directories used by the the
// `http-url`, `font-url`, and `image-url` functions found in
// `_mixins/_assets.scss`
//
// Change the base directories to whatever is needed in this
// project.
//
// Usage generally replaces the default CSS url call, so
// `background-image: image-url('dog.jpg');`
//
// Style guide: sass.URLs

// examples
// --------------------------------------------------------
//
// .test {
//      background-image: url('#{http-url('cat/dog.jpg')}');
// }
//
// src: font-url($font-filename+'.eot');
//
// .test {
//      background-image: image-url('dog.jpg');
// }
//
// --------------------------------------------------------

$static-dir: 'assets'; // can also be ../ or /
$font-dir: 'fonts';
$images-dir: 'img';

// Dimensions
//
// Dimensions variables are used for several baseline settings, such as font-size and line-height. There are also variables to help with design max-width, vertical rhythm, and margin or padding spacing values.
//
// Style guide: sass.dimensions

$base-font-size: 18;
$base-line-height: 27 / $base-font-size;

$vertical-rhythm: $base-font-size / 2; // should equal a whole number
$vertical-unit: rem($vertical-rhythm);

$spacing: (
    'xxl': rem(62),
    'xl': rem(38),
    'l': rem(24),
    'm': rem(15),
    's': rem(9),
    'xs': rem(6),
    'xxs': rem(3)
);

$maxwidth: rem(1440);

// Breakpoints
//
// Site breakpoints are declared in the `$breakpoints` map. These values are used in several places throughout the sass files — in font-size declarations and grid settings. When using breakpoints within media queries, it is recommended to use the `query` function, which calls a breakpoint and returns the proper value depending on the 'min' or 'max' setting of the query. Read more about this usage under functions and mixins.
//
// Usage: `@media #{query('s')}`
//
// Style guide: sass.breakpoints
$breakpoints: (
    'xl': em(1280, 16),
    'l': em(960, 16),
    'm': em(769, 16),
    's': em(481, 16)
);

// Typography
//
// Style guide: typography

// Font Sizes
//
// There are two types of font-sizing in Sasspool —
// responsive and static.
//
// Static sizing sets a specific font-size at a specific
// breakpoint, while responsive scales the font-size
// smoothly between a minimum and maximum size.
//
// The type of sizing used in your project is determined
// by the `$responsive-typography` variable.
//
// These are retuned in Sass with a mixin that references
// the font size — `@include font-size('xxl')`
//
// xxl - @include font-size('xxl')
// xl - @include font-size('xl')
// l - @include font-size('l')
// m - @include font-size('m')
// s - @include font-size('s')
// xs - @include font-size('xs')
//
// Markup:
// <div class="fs-{{modifier_class}} spsg-font-size">A very bad quack might jinx zippy fowls.</div>
//
// Style guide: typography.sizes

// instructions and details
// --------------------------------------------------------
//
// Static example values:
//
// $font-sizes: (
//     'l': (
//                             null: (18px, 2),
//                             's': (20px, 1.75)
//                           ),
//     's': (16px, 2),
//
//     'example': (
//                             null: (15px, 1.3),
//                             's': 16px,
//                             'm': (17px, 1.4),
//                             '900px': 18px,
//                             'l': (19px, 1.45),
//                             '1440px': 20px
//                           ),
//     'example2': 15px
// );
//
// See htt://www.smashingmagazine.com/2015/06/responsive-typography-with-sass-maps/
// for more information.
//
// If two values are provided, the first is the font-size
// and the second is the line height. If a third value is provided,
// it is letter-spacing.
//
// -------------------------------------------------------
//
// Responsive example values:
//
// $font-sizes: (
//     'l': (
//                             'min-font-size': (15px, 1.5),
//                             'max-font-size': 20px,
//                             'lower-font-range': 's',
//                             'upper-font-range': 1440px
//                           ),
//     's': (16px, 2),
//     'example': 15px
// );
//
// See https://github.com/seaneking/postcss-responsive-type
// for more information.
//
// If two values are provided for a font-size (not lower or
// upper font range), the first is the font-size and the
// second is the line height. If a third value is provided,
// it is letter-spacing.
//
// -------------------------------------------------------
//
// For times when you need one off values, you can do:
//
// .test {
//     @include font-size((20px, 1.5));
// }
//
// or
//
// .test {
//     @include font-size((
//         'min-font-size' : (rem(13), 1.5),
//         'max-font-size' : rem(16),
//         'lower-font-range' : 's',
//         'upper-font-range' : 'l'
//     ));
// }
//
// --------------------------------------------------------

$responsive-typography: true;

$font-sizes: (
    'xxl': (
        'min-font-size': (
            rem(40),
            1
        ),
        'max-font-size': rem(50),
        'lower-font-range': 's',
        'upper-font-range': 'l'
    ),
    'xl': (
        'min-font-size': (
            rem(27),
            1.2
        ),
        'max-font-size': rem(36),
        'lower-font-range': 's',
        'upper-font-range': 'l'
    ),
    'l': (
        'min-font-size': (
            rem(20),
            1.3
        ),
        'max-font-size': rem(27),
        'lower-font-range': 's',
        'upper-font-range': 'l'
    ),
    'm': (
        'min-font-size': (
            rem(16),
            1.4
        ),
        'max-font-size': rem(20),
        'lower-font-range': 's',
        'upper-font-range': 'l'
    ),
    's': (
        'min-font-size': (
            rem(13),
            1.5
        ),
        'max-font-size': rem(16),
        'lower-font-range': 's',
        'upper-font-range': 'l'
    ),
    'xs': (
        rem(11),
        1.5
    )
);

// Grid Settings
//
// These variables are explained in greater detail in
// `_2_layout/_grids.scss`
//
// Style guide: layout.grid.settings

$gutter: spacing('l');

$cols: 1; // base number of columns (smallest screens)

$grid-type: 'flex'; // "legacy" for inline-block based, "flex" for flexbox, "modern" for css grids
$push: false;
$pull: false;

// if you assign columns per breakpoint, every breakpoint must have a column assigned (even if it doesn't change)
$grid-breakpoints: (
    'small': (
        'query': 's',
        'cols': 3
    ),
    'medium': (
        'query': 'm',
        'cols': 6
    ),
    'large': (
        'query': 'l',
        'cols': 6
    )
);

// Colors
//
// Typically, we use real color names here. These are retuned in Sass with a function for colors — `color('gray')` — and shades — `color('gray', 'light')`
//
// aqua - color('aqua')
// blue - color('blue')
// navy - color('navy')
// teal - color('teal')
// green - color('green')
// olive - color('olive')
// lime - color('lime')
// yellow - color('yellow')
// orange - color('orange')
// red - color('red')
// fuchsia - color('fuchsia')
// purple - color('purple')
// maroon - color('maroon')
// white - color('white')
// silver - color('silver')
// gray - color('gray')
// gray-light - color('gray', 'light')
// gray-dark - color('gray', 'dark')
// black - color('black')
//
// Markup:
// <div class="bg-{{modifier_class}} spsg-color"></div>
//
// Style guide: colors

$colors: (
    'aqua': #7FDBFF,
    'blue': #0074D9,
    'navy': #001F3F,
    'teal': #39CCCC,
    'green': #2ECC40,
    'olive': #3D9970,
    'lime': #01FF70,
    'yellow': #FFDC00,
    'orange': #FF8E1B,
    'red': #FF4136,
    'pink': rgb(238, 143, 216),
    'purple': #B10DC9,
    'maroon': #85144B,
    'white': #FFF,
    'silver': #DDD,
    'gray': (
        'base': #AAA,
        'light': #CCC,
        'dark': #888
    ),
    'black': #111
);

// Color Roles
//
// Several Sass variables are available for specific color roles. These are used for the document background, text, alerts, errors, and inputs.
//
// Style guide: colors.roles

$body-color: color('white');
$text-color: color('black');

$highlight-color: color('blue'); // used for text selections, etc.

$placeholder-txt: #B2B2B2;

$error-bg: #FFE6E6;
$error-txt: #E04646;
$error-border: #E04646;

$warning-bg: #FCF7D8;
$warning-txt: #B29804;
$warning-border: #B29804;

$info-bg: #E8F3FF;
$info-txt: #537DF6;
$info-border: #537DF6;

$success-bg: #DAFCE1;
$success-txt: #0CA129;
$success-border: #0CA129;

// Borders
//
// Borders are available from variables. Usage in Sass looks like
// `border: $border-width $border-style $border-color;` or `border: $border;`
// or `border-radius: $border-radius;`
//
// Style guide: sass.borders

$border-color: color('black');
$border-style: solid;
$border-width: 1px;
$border-radius: 3px;
$border: $border-width $border-style $border-color;

// z-index
//
// A z-index map is used to keep up with site layering from a central location. The values in this map can be adjusted instead of needing to work through individual modules to stack them properly.
//
// These are retuned in Sass with a function for layers — `zindex('header')` — and sub-layers — `color('header', 'high')`
//
// Style guide: sass.zindex

$zindex: (
    'modal': 900,
    'overlay': 800,
    'dropdown': 700,
    'header': (
        'base': 600,
        'mid': 650,
        'high': 690
    ),
    'footer': 500
);

// Transitions
//
// To make transitions more consistent, a couple of variables are available; `$speed` and `$ease`. These can be used as `transition: all $speed $ease;`
//
// Style guide: sass.transitions

$speed: 0.3s;
$ease: ease-in-out;
