// Arrow
//
// A mixin to create an arrow relative to a parent.  Note
// that your parent element will need to have relative,
// absolute, or fixed position declared.
//
// Influenced by http://www.sassmeister.com/gist/099c793ee0905981b0a0
//
// ```
// .simple-usage {
//   @include arrow(bottom, #ddd);
// }
// ```
//
// ```
// .complex-usage {
//   // Create a 50px yellow arrow that sits 5% in from the top right of a box.
//   @include arrow(right, #ddd, medium, bottom, 5%);
// }
// ```
//
// ```
// .with-a-border {
//   // Create a 50px yellow arrow, with a black border
//   // that sits 5% in from the top right of a box.
//   @include arrow(top, #ddd, 30px, right, 6px, black, 1px);
// }
// ```
//
// **Parameters:**
// * `$edge` - **required** - top / right / bottom / left
// * `$bg-color` - **required** - color of the arrow
// * `$size` - small, medium, large, [value] - defaults to 20px
// * `$location` - middle, left, right, top, bottom - defaults to 'middle'
// * `$offset` - [value] to move the arrow in from an edge by
// * `$border`-color - color of the border - defaults to 'false'
// * `$border`-size - size of the border - defaults to 'false'
//
// **Note:** all parameter values should use the same unit.
//
// Markup:
// <div class="spsg-arrow spsg-arrow--simple"></div>
// <div class="spsg-arrow spsg-arrow--complex"></div>
// <div class="spsg-arrow spsg-arrow--bordered"></div>
//
// Style guide: mixins.arrow

@mixin arrow($edge, $bg-color, $size: 20px, $location: 'middle', $offset: 0, $border-color: false, $border-size: false) {
    // If an offset has been defined, letâ€™s use it.
    @if ($offset != 0) {
        $offset: $offset;
    }

    // Map keyword sizes to actual numbers. Use passed-in value if defined.
    @if ($size == 'small') {
        $size: 10px;
    } @else if ($size == 'medium') {
        $size: 15px;
    } @else if ($size == 'large') {
        $size: 20px;
    } @else {
        $size: $size;
    }

    // Map edge to arrow direction.
    $direction: $edge;
    @if ($edge == 'top') {
        $direction: up;
    } @else if ($edge == 'bottom') {
        $direction: down;
    }

    // if border-size is true but no value is passed, let's assign a default
    @if $border-size == true {
        $border-size: 2px;
    }

    // Host element styles.
    position: relative; // Host element needs relative positioning.


    @if $border-size != false {
        &::before,
        &::after {
            // Defensively reset a bunch of things so we can
            // have different arrows across multiple breakpoints
            @include triangle($size, $bg-color, $direction);

            bottom: auto;
            content: '';
            left: auto;
            margin: 0;
            pointer-events: none;
            position: absolute;
            right: auto;
            top: auto;
            z-index: 1; // Ensure it sits above the host element.

            // If position is top
            @if $edge == 'top' {
                bottom: 100%;

                @if ($location == 'left') {
                    left: $offset;
                }
                @if ($location == 'middle') {
                    left: 50%;
                    margin-left: -$size;
                }
                @if ($location == 'right') {
                    right: $offset;
                }
            }

            // if position is right
            @if $edge == 'right' {
                left: 100%;

                @if ($location == 'top') {
                    top: $offset;
                }
                @if ($location == 'middle') {
                    margin-top: -$size;
                    top: 50%;
                }
                @if ($location == 'bottom') {
                    bottom: $offset;
                }
            }

            // If position is bottom
            @if $edge == 'bottom' {
                top: 100%;

                @if ($location == 'left') {
                    left: $offset;
                }
                @if ($location == 'middle') {
                    left: 50%;
                    margin-left: -$size;
                }
                @if ($location == 'right') {
                    right: $offset;
                }
            }

            // If position is left
            @if $edge == 'left' {
                right: 100%;

                @if ($location == 'top') {
                    top: $offset;
                }
                @if ($location == 'middle') {
                    margin-top: -$size;
                    top: 50%;
                }
                @if ($location == 'bottom') {
                    bottom: $offset;
                }
            }
        }

        @if $border-size == 1px {
            $border-size: $border-size;
        } @else {
            $border-size: $border-size + 1px;
        }
        $border-triangle-size: $size + $border-size;

        &::before {
            @include triangle($border-triangle-size, $border-color, $direction);

            // If position is top
            @if $edge == 'top' {
                @if ($location == 'left') {
                    margin-left: -1 * $border-size;
                }
                @if ($location == 'middle') {
                    margin-left: -1 * $border-size;
                }
                @if ($location == 'right') {
                    margin-right: -1 * $border-size;
                }
            }

            // if position is right
            @if $edge == 'right' {
                @if ($location == 'top') {
                    margin-top: -1 * $border-size;
                }
                @if ($location == 'middle') {
                    margin-top: -1 * $border-size;
                }
                @if ($location == 'bottom') {
                    margin-bottom: -1 * $border-size;
                }
            }

            // If position is bottom
            @if $edge == 'bottom' {
                @if ($location == 'left') {
                    margin-left: -1 * $border-size;
                }
                @if ($location == 'middle') {
                    margin-left: -1 * $border-size;
                }
                @if ($location == 'right') {
                    margin-right: -1 * $border-size;
                }
            }

            // If position is left
            @if $edge == 'left' {
                @if ($location == 'top') {
                    margin-top: -1 * $border-size;
                }
                @if ($location == 'middle') {
                    margin-top: -1 * $border-size;
                }
                @if ($location == 'bottom') {
                    margin-bottom: -1 * $border-size;
                }
            }
        }
    } @else {
        &::after {
            // Defensively reset a bunch of things so we can
            // have different arrows across multiple breakpoints
            @include triangle($size, $bg-color, $direction);

            bottom: auto;
            content: '';
            left: auto;
            margin: 0;
            pointer-events: none;
            position: absolute;
            right: auto;
            top: auto;
            z-index: 1; // Ensure it sits above the host element.

            // If position is top
            @if $edge == 'top' {
                bottom: 100%;

                @if ($location == 'left') {
                    left: $offset;
                }
                @if ($location == 'middle') {
                    left: 50%;
                    margin-left: -$size;
                }
                @if ($location == 'right') {
                    right: $offset;
                }
            }

            // if position is right
            @if $edge == 'right' {
                left: 100%;

                @if ($location == 'top') {
                    top: $offset;
                }
                @if ($location == 'middle') {
                    margin-top: -$size;
                    top: 50%;
                }
                @if ($location == 'bottom') {
                    bottom: $offset;
                }
            }

            // If position is bottom
            @if $edge == 'bottom' {
                top: 100%;

                @if ($location == 'left') {
                    left: $offset;
                }
                @if ($location == 'middle') {
                    left: 50%;
                    margin-left: -$size;
                }
                @if ($location == 'right') {
                    right: $offset;
                }
            }

            // If position is left
            @if $edge == 'left' {
                right: 100%;

                @if ($location == 'top') {
                    top: $offset;
                }
                @if ($location == 'middle') {
                    margin-top: -$size;
                    top: 50%;
                }
                @if ($location == 'bottom') {
                    bottom: $offset;
                }
            }
        }
    }
}
