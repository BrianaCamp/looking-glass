// Default Color Variables
//
// From http://clrs.cc, overwrite these in `_vars.scss`.
//
// Style guide: mixins.colors.default

$colors: (
    'aqua': #7FDBFF,
    'blue': #0074D9,
    'navy': #001F3F,
    'teal': #39CCCC,
    'green': #2ECC40,
    'olive': #3D9970,
    'lime': #01FF70,
    'yellow': #FFDC00,
    'orange': #FF851B,
    'red': #FF4136,
    'fuchsia': #F012BE,
    'purple': #B10DC9,
    'maroon': #85144B,
    'white': #FFF,
    'silver': #DDD,
    'gray': (
        'base': #AAA,
        'light': #CCC,
        'dark': #888
    ),
    'black': #111
) !default;

// Colors
//
// Shortcut function to grab the map $colors.
//
// ```
// color: color('blue', 'light');
// ```
//
// $color - top level color value from the map, eg. 'blue'
// $tone - 'base' by default, choose a tone from a submap if available, eg. 'light' or 'dark'
// $color-map - $colors by default, but you can specify a different map to pull from if needed
//
// Style guide: mixins.colors

@function color($color, $tone: 'base', $color-map: $colors) {
    @if type-of(map-get($color-map, $color)) == 'map' {
        @return map-get(map-get($color-map, $color), $tone);
    } @else {
        @return map-get($color-map, $color);
    }
}

// Shades
//
// Functions to make shade variables from a base color.
//
// Tint and Shade from https://css-tricks.com/snippets/sass/tint-shade-functions/
//
// ```
// color: tint(color('blue'), 10%);
// ```
//
// tint - slightly lighten a color - takes `$color` and `$percentage` parameters
// shade - slightly darken a color - takes `$color` and `$percentage` parameters
// dark - darken a color by 10% - takes `$color` parameter
// darker - darken a color by 25% - takes `$color` parameter
// darkest - darken a color by 40% - takes `$color` parameter
// light - lighten a color by 10% - takes `$color` parameter
// lighter - lighten a color by 25% - takes `$color` parameter
// lightest - lighten a color by 40% - takes `$color` parameter
//
// Style guide: mixins.colors.shades

@function tint($color, $percentage) {
    @return mix(white, $color, $percentage);
}

@function shade($color, $percentage) {
    @return mix(black, $color, $percentage);
}

@function darkest($color) {
    @return shade($color, 40%);
}

@function darker($color) {
    @return shade($color, 25%);
}

@function dark($color) {
    @return shade($color, 10%);
}

@function light($color) {
    @return tint($color, 10%);
}

@function lighter($color) {
    @return tint($color, 25%);
}

@function lightest($color) {
    @return tint($color, 40%);
}

// Gradients
//
// Modified from http://codepen.io/Hornebom/pen/epqmGx/
//
// Built upon the logic found in a ps file
// element has a solid background
// background is covered by a gradient of one color
// one can define the opacity of the two color stops + the gradient angle
//
// ```
// @include gradient($purple-base, $mint-base);
// ```
//
// ```
// @include gradient($purple-base, $mint-base, 0.8, 0.6, 180);
// ```
//
// $bg-color - background-color
// $gradient-color - gradient color
// $opacity-start - opacity at start: 0.0 — 1.0
// $opacity-end - opacity at end: 0.0 — 1.0
// $angle - gradient angle
//
// Style guide: mixins.colors.gradients

@mixin gradient($bg-color, $gradient-color, $opacity-start: 1, $opacity-end: 0, $angle: 0) {
    background-color: $bg-color;
    background-image: linear-gradient(($angle * 1deg), rgba($gradient-color, $opacity-start), rgba($gradient-color, $opacity-end));
    background-position: 0 0;
    background-repeat: no-repeat;
    background-size: 100% 100%;
}
